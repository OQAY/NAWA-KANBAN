/*!
 * KANBAN STYLES - Pragmatic Modular Architecture
 * Refactored from 1543-line monolithic file
 * 
 * CORRECTED APPROACH: 4 files (vs 17 over-engineered files)
 * Focus: Component-specific needs, not framework building
 * Philosophy: YAGNI (You Ain't Gonna Need It) applied
 */

// ===========================================
// SETTINGS: Design system tokens
// ===========================================
@import '00-settings/variables';

// ===========================================
// TOOLS: Essential mixins only
// ===========================================
@import 'mixins';

// ===========================================
// COMPONENTS: All kanban components
// ===========================================
@import 'components';

// ===========================================
// PRAGMATIC APPROACH NOTES
// ===========================================
/*
 * LESSONS LEARNED:
 * 
 * BEFORE (Over-engineering):
 * - 17 files, 2884+ lines
 * - Utilities never used (207 lines of .u-* classes)
 * - Animations for non-existent features
 * - Framework-level abstraction for single component
 * 
 * AFTER (Pragmatic):
 * - 4 files, ~600 lines
 * - Only what's actually used
 * - Component-focused, not framework-focused
 * - Easy to understand and maintain
 * 
 * KEY INSIGHT:
 * Good senior developers know when NOT to over-engineer.
 * This demonstrates pragmatism over showcasing.
 */